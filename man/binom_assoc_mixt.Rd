% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mixmodel_functions.R
\name{binom_assoc_mixt}
\alias{binom_assoc_mixt}
\title{Fit Binomial mixture models to  social association data}
\usage{
binom_assoc_mixt(Den, Num, minJ = 1, maxJ = 9, nrep = 20,
  criterion = "ICL", run.all.J = FALSE)
}
\arguments{
\item{Den}{A numeric vector of the association index denominator.}

\item{Num}{A numeric vector of the association index numerator.}

\item{minJ}{Integer. Minimum component model to fit to the data. Default = \code{1}.}

\item{maxJ}{Integer. Maximum componenet model to fit to the data. Default = \code{9}.}

\item{nrep}{Something}

\item{criterion}{String. Model fitting criteria to use to choose best model.
Categorical, options are \code{"ICL"}[default], \code{"AIC"} & \code{"BIC"}.}

\item{run.all.J}{Logical. If \code{TRUE} fits all component models between \code{minJ}
and \code{maxJ}. If \code{FALSE} [default], when two component-models in a row fit less well (by
\code{criterion}) stops the analysis and returns output.}
}
\value{
Output is a list with elements (access via index or \code{$element.name}): \cr \cr
\code{summary}. A summary table (data frame) summarising the fitted models. Each row is a model
fitted with J components with columns:
\itemize{
 \item \code{K.in}: Input number of components \code{J}
 \item \code{K.out}: Number of components fitted by the model (should match \code{K.in}).
 \item \code{S}: Shannon's Entropy.
 \item \code{rho}: Something
 \item \code{AIC}: Model AIC
 \item \code{BIC}: Model BIC
 \item \code{ICL}: Model ICL
}
\code{all.models} Output from all models (see \code{\link{fit_binom_mixture_model}})
in order from \code{minJ} to \code{maxJ} as list.
\cr \cr
\code{best.model} The output from the best fitting model, selected via \code{criterion}. Output
is list output from \code{\link{fit_binom_mixture_model}}.
}
\description{
This function fits up to \code{maxJ} binomial mixture models to social data. Returning a summary
of the fit of each model and the output of the best fitting model. \cr \cr
Where J > 1 this calls function \code{fit_binom_mixture_model}. Where J = 1, fits a standard
(non-mixture) binomial model. If minJ=maxJ a single model is run.
}
\examples{
# Generate simulated social data with a known number of components and sampling effort
K = 3 # number of types (K/J)
N = 20 # number of individuals
N.dyad = (N*(N-1))/2 #number of dyads
mean.d = 80 #sampling effort
bad.par = T
while(bad.par){
  mu = runif(K,0,1)
  a = runif(K,0,1)
  a = a/sum(a)
  if(min(dist(mu))>=0.1 & min(a)>=0.1/K) bad.par = F
}
rho = runif(K,0,0.015) #overdispersion
b1 = mu*(1/rho - 1) #shape parameters from means and overdispersion
b2 = ((mu-1)*(rho-1))/rho
k = sample(K, size = N.dyad, rep = T, prob = a) #assign classes
p = rbeta(n=N.dyad,shape1=b1[k],shape2=b2[k]) #assign association probabilities
d = rpois(N.dyad,mean.d) #assign denominators
x = rbinom(n=N.dyad,size=d,prob=p) #assign numerators
names(d) = as.roman(seq(1,length(d),1)) #Add edge names
names(x) = as.roman(seq(1,length(x),1)) # Add edge names

#Run the models, stopping when best fitting model is reached.
model.fit = binom_assoc_mixt(Den = d,Num = x,criterion="ICL")
model.fit$summary

#Run all models, between minJ and maxJ
model.fit = binom_assoc_mixt(Den = d, Num = x, minJ = 1, maxJ = 9, run.all.J = TRUE, criterion="ICL")
model.fit$summary
}
